name: Build, Release and Deploy

on: push

jobs:
  prepare-tags:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.set.outputs.timestamp }}
    steps:
      - name: Create timestamp
        id: set
        run: echo "timestamp=$(TZ=Asia/Jakarta date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

  build:
    needs: prepare-tags
    strategy:
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
          - arch: arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push for ${{ matrix.arch }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/${{ matrix.arch }}
          tags: |
            ghcr.io/${{ github.repository }}:latest-${{ matrix.arch }}
            ghcr.io/${{ github.repository }}:${{ needs.prepare-tags.outputs.timestamp }}-${{ matrix.arch }}
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  merge-manifest:
    needs: [prepare-tags, build]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge per-arch tags into multi-arch manifests
        run: |
          REPO=ghcr.io/${{ github.repository }}
          TIMESTAMP=${{ needs.prepare-tags.outputs.timestamp }}

          docker buildx imagetools create \
            --tag "$REPO:latest" \
            --tag "$REPO:$TIMESTAMP" \
            "$REPO:latest-amd64" \
            "$REPO:latest-arm64"
          
  deploy:
    runs-on: ubuntu-latest
    needs: [merge-manifest, prepare-tags]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install helm
        uses: azure/setup-helm@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        
      - name: Deploy new release
        run: |
          TIMESTAMP=${{ needs.prepare-tags.outputs.timestamp }}
          RELEASE_NAME=$(echo "${{ github.event.repository.name }}" | tr -d '.')
          
          TELEGRAM_SALE_BOT_TOKEN=${{ secrets.TELEGRAM_SALE_BOT_TOKEN }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          TELEGRAM_GROUP_ID=${{ vars.TELEGRAM_GROUP_ID }}
          TELEGRAM_GROUP_LINK=${{ vars.TELEGRAM_GROUP_LINK }}
          TELEGRAM_SALE_DAY=${{ vars.TELEGRAM_SALE_DAY }}

          helm upgrade $RELEASE_NAME helm-charts \
            --install \
            --set image.tag="$TIMESTAMP" \
            --set "env[0].name=TELEGRAM_SALE_BOT_TOKEN" --set "env[0].value=$TELEGRAM_SALE_BOT_TOKEN" \
            --set "env[1].name=DATABASE_URL" --set "env[1].value=$DATABASE_URL" \
            --set "env[2].name=TELEGRAM_GROUP_ID" --set "env[2].value=$TELEGRAM_GROUP_ID" \
            --set "env[3].name=TELEGRAM_GROUP_LINK" --set "env[3].value=$TELEGRAM_GROUP_LINK" \
            --set "env[4].name=TELEGRAM_SALE_DAY" --set "env[4].value=$TELEGRAM_SALE_DAY" \
            --atomic \
            --history-max 2 \
            --debug
